{"version":3,"sources":["Grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","event","id","Number","target","value","console","log","selectStory","_this2","stories","map","story","index","selected","react_default","a","createElement","key","className","score","title","by","text","Component","App","state","fetchStories","then","setState","fromStory","toStory","fetch","response","json","storyIds","slice","storyPromises","_ref","asyncToGenerator","regenerator_default","mark","_callee","storyId","wrap","_context","prev","next","abrupt","concat","stop","_x3","apply","arguments","Promise","all","he","decode","String","src_Grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.946f0e91.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './grid.css';\n\nclass Grid extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n\n    }\n\n    onClick(event) {\n        let id = Number(event.target.value);\n        console.log(id);\n        this.props.selectStory(id);\n    }\n\n    render() {\n\n        const stories = this.props.stories;\n\n        return stories.map((story, index) => {\n            if (story.selected) {\n                return (\n                    <button key={story.id} id={story.id} className=\"card selected\" onClick={this.onClick} value={story.id}>\n                        <div className=\"points\">&#9650; {story.score} points</div>\n                        <div className=\"card-header\">{story.title}</div>\n                        <div className='author'>{story.by}</div>\n                        <div className=\"text-selected\">{story.text}</div>\n                    </button>)\n            }\n            else {\n                return (\n                    <button key={story.id} id={story.id} className=\"card not-selected\" onClick={this.onClick}\n                       value={story.id}>\n                        <div className=\"points\">&#9650; {story.score} points</div>\n                        <div className=\"card-header\">{story.title}</div>\n                        <div className='author'>{story.by}</div>\n                        <div className='text'>{story.text}</div>\n                    </button>\n                )\n            }\n        })\n    }\n}\n\nexport default Grid","import React, { Component } from 'react';\nimport './index.css';\nimport Grid from './Grid/Grid.js'\nimport he from 'he'\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stories: []\n        }\n        this.selectStory = this.selectStory.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchStories(0,24).then((stories) => {\n            this.setState({\n                stories\n            })\n        })\n    }\n\n    /*\n    * Untested\n    * */\n    async fetchStories(fromStory, toStory) {\n\n        let storyIds = await fetch(`https://hacker-news.firebaseio.com/v0/askstories.json?print=pretty`).then(response => response.json()).then((response) => {\n            return response;\n        })\n\n        storyIds = storyIds.slice(fromStory, toStory);\n\n        let storyPromises = storyIds.map(async (storyId) => {\n            return fetch(`https://hacker-news.firebaseio.com/v0/item/${storyId}.json?print=pretty`).then((response) => response.json())\n        })\n\n        return Promise.all(storyPromises).then((response)=> {\n            let stories = response.map((story) => {\n                story.selected = false;\n                story.text = he.decode(String(story.text));\n                story.title = he.decode(String(story.title));\n                return story\n            })\n            return stories;\n        });\n    }\n\n    selectStory(id) {\n        let stories = this.state.stories;\n        stories.map((story) => {\n            story = story.id === id ? story.selected = !story.selected : story.selected;\n            return story\n        })\n\n        this.setState({\n            stories: stories\n        })\n    }\n\n    render() {\n\n        const stories = this.state.stories;\n\n        return (\n            <div>\n                <div className=\"container\">\n                    <div className=\"wrapper\">\n                        <Grid stories={stories} selectStory={this.selectStory}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}